


Count anagrams and print them in order.

class Solution{
  public:
   vector<vector<string>> Anagrams(vector<string>& string_list) {

  vector<vector<string>> ans;
  unordered_map <string, vector<string>> mp;
        
  for(auto str : string_list) {
    string word = str;
    sort(word.begin(), word.end());
    mp[word].push_back(str);
  }
        
  for(auto it : mp) {
    ans.push_back(it.second);
  }    
  return ans;
}
};


=================================================================================================================================================================

Overlapping rectangles 

class Solution {
  public:
    int doOverlap(int L1[], int R1[], int L2[], int R2[]) {
        // code here
        if(L1[0]>R2[0]||L2[0]>R1[0])
           return false;
       if(R1[1]>L2[1]||R2[1]>L1[1])
           return false;
       return true;
    }
};


=================================================================================================================================================================


Count the subarrays having product less than k in an array of positive integers.

   int countSubArrayProductLessThanK(const vector<int>& a, int n, long long k) {
       
         long long int product=1,j=0,ans=0;
       for(int i=0;i<n;i++)
       {
           product*=a[i];
           while(j<n && product >= k)
           {
               product/=a[j++];
           }
           ans+=(i-j+1);
       }
       return ans;
   
   }


=================================================================================================================================================================